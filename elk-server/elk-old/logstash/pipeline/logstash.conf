input {
  udp {
    port => 514
    type => "cisco_logs"
  }
}

filter {
  if [type] == "cisco_logs" {
    if [message] =~ /\{.*?\}/ {
      json {
        source => "message"
        target => "cisco"
      }
    }

    mutate {
      remove_field => ["message"]
    }

    ruby {
      code => '
        begin
          cisco = event.get("[cisco]")
          if cisco
            begin
              event.set("[host][name]", cisco["hostname"]) if cisco["hostname"]
              event.set("[observer][product]", cisco["app_name"]) if cisco["app_name"]
              event.set("[message]", cisco["msg"]) if cisco["msg"]

              severity = cisco["severity_num"] # Use severity_num directly
              if severity
                begin
                  severity_int = Integer(severity)
                  severity_string = case severity_int # Get string representation
                  when 0 then "emergency"
                  when 1 then "alert"
                  when 2 then "critical"
                  when 3 then "error"
                  when 4 then "warning"
                  when 5 then "notice"
                  when 6 then "informational"
                  when 7 then "debug"
                  else "unknown" # Important: Handle out-of-range values
                  end
                  event.set("[log][level]", severity_string) # Set the string value
                  event.set("[log][level_num]", severity_int) # Store numeric value in a separate field
                rescue ArgumentError => e
                  puts "Warning: Severity is not an integer: #{severity}, Error: #{e.message}"
                  event.set("[log][level]", "unknown")
                  event.set("[log][level_num]", -1) # Or some other default numeric value
                end
              else
                event.set("[log][level]", "unknown")
                event.set("[log][level_num]", -1)
              end

              timestamp_str = cisco["timestamp"]
              if timestamp_str
                begin
                  timestamp = DateTime.parse(timestamp_str).to_time.utc
                  event.set("[@timestamp]", timestamp)
                rescue ArgumentError => e
                  puts "Error parsing timestamp: #{e.message}"
                end
              end

              event.remove("[cisco]")
            rescue => e
              puts "Error accessing cisco fields: #{e.message}"
              puts e.backtrace
            end
          end
        rescue => e
          puts "Unexpected Ruby Filter Error: #{e.message}"
          puts e.backtrace
        end
      '
    }
  }
}

output {
  stdout { codec => rubydebug }
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "network_logs"
    user => "elastic"
    password => "${ELASTIC_PASSWORD}"
  }
}
